(define enpassent-black (list 0 0 0 0 0 0 0 0))
(define enpassent-white (list 0 0 0 0 0 0 0 0))


(define castlecheckr1c1 0)
(define castlecheckr1c8 0)
(define castlecheckr8c1 0)
(define castlecheckr8c8 0)
(define trash 0)

(define (findkingpos board player)
  (define pos (cons player 'king))
  (define bb (append
              (list-ref board 0)
              (list-ref board 1)
              (list-ref board 2)
              (list-ref board 3)
              (list-ref board 4)
              (list-ref board 5)
              (list-ref board 6)
              (list-ref board 7)))
  (define (fph b i)
    (cond
      ((null? b) (cons player 'not-found-mar-gaye!))
      ((equal? pos (car b)) i)
      (else (fph (cdr b) (+ i 1)))))
  (define indd (fph bb 1))
  (if (= (remainder indd 8) 0) (cons (quotient indd 8) 8)
      (cons (+ (quotient indd 8) 1) (remainder indd 8))))


(define (final-check? pos1 pos2 given-board player . z)
  (define piece (list-ref (list-ref given-board (- (car pos1) 1)) (- (cdr pos1) 1)))
  (if (null? z) (null-call pos1 pos2 piece given-board player) (not-null-call pos1 pos2 piece given-board player)))

(define (not-null-call pos1 pos2 piece board player . z)
  (if (validmove pos1 pos2 board player)
      (begin (set! board1 board) (checkcheck (update pos1 pos2 board) player))
      (begin (set! board1 board) #f)))

(define (null-call pos1 pos2 piece board player)
  (define ans
    (if (validmove pos1 pos2 board player 'yes)
        (begin
          (update pos1 pos2)
          (checkcheck board1 player))
        #f))
  (begin
    (cond
      ((and ans (equal? pos1 (cons 1 1))) (set! castlecheckr1c1 1))
      ((and ans (equal? pos1 (cons 1 8))) (set! castlecheckr1c8 1))
      ((and ans (equal? pos1 (cons 8 1))) (set! castlecheckr8c1 1))
      ((and ans (equal? pos1 (cons 8 8))) (set! castlecheckr8c8 1))
      ((and ans (equal? (cdr piece) `king)) (if (equal? (car piece) `W)
                                                (begin (set! castlecheckr8c1 1)
                                                       (set! castlecheckr8c8 1))
                                                (begin (set! castlecheckr1c1 1)
                                                       (set! castlecheckr1c8 1))))
      ((not ans) (set! board1 board))
      (else (set! trash 0)))
    ans))


(define (checkcheck board1 player)
  (define row 9)
  (define col 9)
  (define kpos (findkingpos board1 player))
  (foldr (lambda (x y)
           (and 
            (foldr (lambda (a b)
                     (cond 
                       ((or (null? a) (equal? (car a) player)) (begin (set! row (- row 1)) b))
                       (else (if (validmove (cons col row) kpos board1 (if (equal? player 'B) 'W 'B)) (begin (set! row (- row 1)) #f) (begin (set! row (- row 1)) b)))))
                   (begin (set! row 8)
                          (set! col (- col 1))
                          #t)
                   x)
            y))
         #t
         board1))

(define (validmove pos1 pos2 given-board player . z)
  (define col1 (cdr pos1))
  (define col2 (cdr pos2))
  (define row1 (car pos1))
  (define row2 (car pos2))
  (define (validking)
    (cond
      ((= col1 col2) (if (= 1 (abs (- row1 row2))) #t #f))
      ((= row1 row2) (if (= 1 (abs (- col1 col2))) #t #f))
      ((and (= 1 (abs (- col1 col2))) (= 1 (abs (- row1 row2)))) #t)
      (else #f)))
  
  (define (validqueen)
    (if (or (validrook) (validbishop)) #t #f))
  
  (define (validbishop)
    (define (check-1)
      (define col-init (min col1 col2))
      (define row-init (min row1 row2))
      (define row-fin (max row1 row2))
      (define (ch1 row col)
        (if (= row row-fin) #t
            (if (null? (list-ref (list-ref given-board (- row 1)) (- col 1))) (ch1 (+ 1 row) (+ 1 col)) #f)))
      (ch1 (+ row-init 1) (+ col-init 1)))
    
    (define (check-2)
      (define col-init (min col1 col2))
      (define row-init (max row1 row2))
      (define row-fin (min row1 row2))
      (define (ch2 row col)
        (if (= row row-fin) #t
            (if (null? (list-ref (list-ref given-board (- row 1)) (- col 1))) (ch2 (- row 1) (+ 1 col)) #f)))
      (ch2 (- row-init 1) (+ col-init 1)))
    
    (cond
      ((= (- col1 col2) (- row1 row2)) (check-1))
      ((= (- col1 col2) (- (- row1 row2))) (check-2))
      (else  #f)))
  
  (define (validknight)
    (if (or (and (= 1 (abs (- col1 col2))) (= 2 (abs (- row1 row2)))) (and (= 1 (abs (- row1 row2))) (= 2 (abs (- col1 col2))))) #t #f))
  
  (define (validrook)
    (define (check-col)
      (define rowmax (max row1 row2))
      (define rowmin (min row1 row2))
      (define (ccol row)date
        (if (= row rowmax) #t
            (if (null? (list-ref (list-ref given-board (- row 1)) (- col1 1))) (ccol (+ 1 row)) #f)))
      (ccol (+ 1 rowmin)))
    
    (define (check-row)
      (define colmax (max col1 col2))
      (define colmin (min col1 col2))
      (define (crow col)
        (if (= col colmax) #t
            (if (null? (list-ref (list-ref given-board (- row1 1)) (- col 1))) (crow (+ 1 col)) #f)))
      (crow (+ 1 colmin)))
    
    (cond
      ((= col1 col2) (check-col))
      ((= row1 row2) (check-row))
      (else #f)))
  
  (define (validenpassant)
    (define tempboard board)
    (or (if (and
             (eq? player 'B)
             (= row1 5)
             (= row2 6)
             (= (abs (- col1 col2)) 1)
             (= 1 (list-ref enpassent-black (- col2 1))))
            (if (not (null? z)) (begin (update pos2 (cons (- (car pos2) 1) (cdr pos2))) #t) #t)
            #f)
        (if (and
             (eq? player 'W)
             (= row1 4)
             (= row2 3)
             (= (abs (- col1 col2)) 1)
             (= 1 (list-ref enpassent-white (- col2 1))))
            (if (not (null? z)) (begin (update pos2 (cons (+ (car pos2) 1) (cdr pos2))) #t) #t)
            #f)))
  
  (define (validpawn)
    (define square2 (list-ref (list-ref given-board (- row2 1)) (- col2 1)))
    (define ans (cond ((and (null? square2) (= col1 col2)) (if (eq? player 'W)
                                                               (cond ((= (- row1 row2) 1) #t)
                                                                     ((and (= row2 5) (= row1 7) (null? (list-ref (list-ref given-board 5) (- col2 1)))) #t)
                                                                     (else #f))
                                                               (cond ((= (- row1 row2) -1) #t)
                                                                     ((and (= row2 4) (= row1 2) (null? (list-ref (list-ref given-board 2) (- col2 1)))) #t)
                                                                     (else #f))))
                      ((and (= (abs (- col1 col2)) 1) (not (null? square2))) (cond ((and (eq? player 'W) (= (- row1 row2) 1) (eq? 'B (car square2))) #t)
                                                                                   ((and (eq? player 'B) (= (- row1 row2) -1) (eq? 'W (car square2))) #t)
                                                                                   (else #f)))
                      (else #f)))
    
    (if (null? z) ans 
        (pawnvalid? ans)))
  
  (define (pawnvalid? ans)
    (if ans
        (cond ((= (- row1 row2) 2) (begin (set! enpassent-black (cond ((= col1 1) (list 1 0 0 0 0 0 0 0))
                                                                      ((= col1 2) (list 0 1 0 0 0 0 0 0))
                                                                      ((= col1 3) (list 0 0 1 0 0 0 0 0))
                                                                      ((= col1 4) (list 0 0 0 1 0 0 0 0))
                                                                      ((= col1 5) (list 0 0 0 0 1 0 0 0))
                                                                      ((= col1 6) (list 0 0 0 0 0 1 0 0))
                                                                      ((= col1 7) (list 0 0 0 0 0 0 1 0))
                                                                      (else (list 0 0 0 0 0 0 0 1))))
                                          ans))
              ((= (- row1 row2) -2) (begin (set! enpassent-white (cond ((= col1 1) (list 1 0 0 0 0 0 0 0))
                                                                       ((= col1 2) (list 0 1 0 0 0 0 0 0))
                                                                       ((= col1 3) (list 0 0 1 0 0 0 0 0))
                                                                       ((= col1 4) (list 0 0 0 1 0 0 0 0))
                                                                       ((= col1 5) (list 0 0 0 0 1 0 0 0))
                                                                       ((= col1 6) (list 0 0 0 0 0 1 0 0))
                                                                       ((= col1 7) (list 0 0 0 0 0 0 1 0))
                                                                       (else (list 0 0 0 0 0 0 0 1))))
                                           ans))
              ((and (eq? player 'W) (= row2 1)) (boardsetter))
              ((and (eq? player 'B) (= row2 8)) (boardsetter))
              (else ans))
        ans))
  
  (define (boardsetter)
    (update pos1 pos2)
    (define tempboard board1)
    (set! board1 board)
    (if (equal? player 'B)
        (if (checkcheck tempboard player)
            (begin (selector) #t)
            #f)
        (if (checkcheck tempboard player)
            (begin (selector) #t)
            #f)))
  
  (define (selector)
    (define v-for-pawn (open-viewport "Select piece to change for pawn" 250 240))
    ((draw-pixmap v-for-pawn) "Images/queen-.png" (make-posn 0 0) (make-rgb 0 0 0))
    ((draw-pixmap v-for-pawn) "Images/rook-.png" (make-posn 0 60) (make-rgb 0 0 0))
    ((draw-pixmap v-for-pawn) "Images/bishop-.png" (make-posn 0 120) (make-rgb 0 0 0))
    ((draw-pixmap v-for-pawn) "Images/knight-.png" (make-posn 0 180) (make-rgb 0 0 0))
    (define moc (get-mouse-click v-for-pawn))
    (define pmc1 (mouse-click-posn moc))
    (define x (posn-x pmc1))
    (define y (posn-y pmc1))
    (close-viewport v-for-pawn)
    (change-board-for-pawn-upgrade (cond ((< y 60) 'queen)
                                         ((< y 120) 'rook)
                                         ((< y 180) 'bishop)
                                         (else 'knight))
                                   pos1 pos2))
  
  (define (validcastle)
    (define tempboard given-board)
    (or
     (if (and
          (equal? pos1 (cons 1 5))
          (equal? pos2 (cons 1 7))
          (= castlecheckr1c8 0)
          (null? (list-ref (list-ref given-board 0) 6))
          (null? (list-ref (list-ref given-board 0) 5))
          (not (in-check? player))
          (begin
            (set! tempboard (update (cons 1 5) (cons 1 7) tempboard))
            (set! tempboard (update (cons 1 8) (cons 1 6) tempboard))
            (checkcheck tempboard player)))
         (if (not (null? z))
             (begin (update (cons 1 8) (cons 1 6)) (set! board board1) #t)
             (set! trash 0))
         (begin (set! tempboard given-board) #f))
     (if (and
          (equal? pos1 (cons 1 5))
          (equal? pos2 (cons 1 3))
          (= castlecheckr1c1 0)
          (null? (list-ref (list-ref given-board 0) 2))
          (null? (list-ref (list-ref given-board 0) 3))
          (null? (list-ref (list-ref given-board 0) 1))
          (not (in-check? player))
          (begin
            (set! tempboard (update (cons 1 5) (cons 1 3) tempboard))
            (set! tempboard (update (cons 1 1) (cons 1 4) tempboard))
            (checkcheck tempboard player)))
         (if (not (null? z))
             (begin (update (cons 1 1) (cons 1 4)) (set! board board1) #t)
             (begin (set! trash 0) #t))
         (begin (set! tempboard given-board) #f))
     (if (and
          (equal? pos1 (cons 8 5))
          (equal? pos2 (cons 8 7))
          (= castlecheckr8c8 0)
          (null? (list-ref (list-ref given-board 7) 6))
          (null? (list-ref (list-ref given-board 7) 5))
          (not (in-check? player))
          (begin
            (set! tempboard (update (cons 8 5) (cons 8 7) tempboard))
            (set! tempboard (update (cons 8 8) (cons 8 6) tempboard))
            (checkcheck tempboard player)))
         (if (not (null? z))
             (begin (update (cons 8 8) (cons 8 6)) (set! board board1) #t)
             (begin (set! trash 0) #t))
         (begin (set! tempboard given-board) #f))
     (if (and
          (equal? pos1 (cons 8 5))
          (equal? pos2 (cons 8 3))
          (= castlecheckr8c1 0)
          (null? (list-ref (list-ref given-board 7) 1))
          (null? (list-ref (list-ref given-board 7) 2))
          (null? (list-ref (list-ref given-board 7) 3))
          (not (in-check? player))
          (begin
            (set! tempboard (update (cons 8 5) (cons 8 3) tempboard))
            (set! tempboard (update (cons 8 1) (cons 8 4) tempboard))
            (checkcheck tempboard player)))
         (if (not (null? z))
             (begin (update (cons 8 1) (cons 8 4)) (set! board board1) #t)
             (begin (set! trash 0) #t))
         #f)))
  
  (if (not (null? z))
      (if (eq? player 'W) (set! enpassent-black (list 0 0 0 0 0 0 0 0)) (set! enpassent-white (list 0 0 0 0 0 0 0 0)))
      (set! trash 0))
  (define piece (cdr (list-ref (list-ref given-board (- row1 1)) (- col1 1))))
  (cond
    ((not (and (< col1 9) (< col2 9) (< row1 9) (< row2 9) (> col1 0) (> col2 0) (> row1 0) (> row2 0))) #f)
    ((equal? (car (list-ref (list-ref given-board (- row1 1)) (- col1 1))) 
             (if (null? (list-ref (list-ref given-board (- row2 1)) (- col2 1))) 'S
                 (car (list-ref (list-ref given-board (- row2 1)) (- col2 1))))) #f)
    ((equal? piece `queen) (or (validrook) (validbishop)))
    ((equal? piece `bishop) (validbishop))
    ((equal? piece `knight) (validknight))
    ((equal? piece `pawn) (or (validpawn) (validenpassant)))
    ((equal? piece `rook) (validrook))
    ((equal? piece `king) (or (validking) (validcastle)))
    (else "error catch 1")))

(define (change-board-for-pawn-upgrade piece pos1 pos2)
  (if (eq? player 'W)
      (set! board (list (list-ref board 0)
                        (changer (list-ref board 1) (cdr pos1) piece)
                        (list-ref board 2)
                        (list-ref board 3)
                        (list-ref board 4)
                        (list-ref board 5)
                        (list-ref board 6)
                        (list-ref board 7)))
      (set! board (list (list-ref board 0)
                        (list-ref board 1)
                        (list-ref board 2)
                        (list-ref board 3)
                        (list-ref board 4)
                        (list-ref board 5)
                        (changer (list-ref board 6) (cdr pos1) piece)
                        (list-ref board 7))))
  (set! board1 board))

(define (changer lst pos piece) ;; helper of pawn-upgrade
  (if (= pos 1) (cons (cons player piece) (cdr lst))
      (cons (car lst) (changer (cdr lst) (- pos 1) piece))))

(define kpos (cons 1 1))

(define (in-check? player)
  (set! kpos (findkingpos board player))
  (define (positions-in-opponent b i)
    (cond ((null? b) `())
          ((null? (car b)) (positions-in-opponent (cdr b) (+ i 1)))
          ((eq? player (caar b)) (positions-in-opponent (cdr b) (+ i 1)))
          (else (cons (if (= 0 (remainder i 8)) (cons (quotient i 8) 8) (cons (+ 1 (quotient i 8)) (remainder i 8)))
                      (positions-in-opponent (cdr b) (+ i 1))))))
  (define bb (append
              (list-ref board 0)
              (list-ref board 1)
              (list-ref board 2)
              (list-ref board 3)
              (list-ref board 4)
              (list-ref board 5)
              (list-ref board 6)
              (list-ref board 7)))
  (define posopp (positions-in-opponent bb 1))
  (define (inch poss)
    (cond ((null? poss) #f)
          ((validmove (car poss) kpos board (if (eq? player 'B) 'W 'B)) #t)
          (else (inch (cdr poss)))))
  (inch posopp))

(define (all-valid-moves)
  (define (iter i j)
    (cond ((= i 9) `())
          ((= j 9) (iter (+ i 1) 1))
          ((or (null? (list-ref (list-ref board (- i 1)) (- j 1))) (not (eq? player (car (list-ref (list-ref board (- i 1)) (- j 1)))))) (iter i (+ j 1)))
          ((null? (valid-moves (cons i j))) (iter i (+ j 1)))
          (else (append (valid-moves (cons i j)) (iter i (+ j 1))))))
  (iter 1 1))

(define (valid-moves pos)
  (define (generate-list fr fc) ; fr and fc are functions on r and c resp.
    (define (gl count l)
      (define posr (fr count))
      (define posc (fc count))
      
      (if (and (> posr 0) (< posr 9) (> posc 0) (< posc 9)) (gl (+ 1 count) (append l (list (cons posr posc))))
          l))
    (gl 1 '()))
  
  (define r (car pos))
  (define c (cdr pos))
  (define piece (cdr (list-ref (list-ref board (- r 1)) (- c 1))))
  (define color (car (list-ref (list-ref board (- r 1)) (- c 1))))
  (define moves-list '())
  
  (set! moves-list
        (cond
          ((equal? piece `pawn) (if (equal? color `W) (list
                                                       (cons (- r 1) c)
                                                       (cons (- r 2) c)
                                                       (cons (- r 1) (- c 1))
                                                       (cons (- r 1) (+ c 1)))
                                    (list
                                     (cons (+ r 1) c)
                                     (cons (+ r 2) c)
                                     (cons (+ r 1) (- c 1))
                                     (cons (+ r 1) (+ c 1)))))
          
          ((equal? piece `rook) (append (generate-list (lambda (x) x) (lambda (y) c))
                                        (generate-list (lambda (x) r) (lambda (y) y))))
          
          ((equal? piece `knight) (list (cons (- r 2) (+ c 1)) (cons (- r 2) (- c 1))
                                        (cons (+ r 2) (+ c 1)) (cons (+ r 2) (- c 1))
                                        (cons (- r 1) (+ c 2)) (cons (- r 1) (- c 2))
                                        (cons (+ r 1) (+ c 2)) (cons (+ r 1) (- c 2))))
          
          ((equal? piece `bishop) (append
                                   (if (> r c) (generate-list (lambda (x) (- 9 x)) (lambda (y) (- (+ c 9) (+ r y)))) ; -ve slope line
                                       (generate-list (lambda (x) (- (+ r 9) (+ c x))) (lambda (y) (- 9 y))))
                                   
                                   (if (> (+ r c) 9) (generate-list (lambda (x) (- 9 x)) (lambda (y) (+ r c y -9)))
                                       (generate-list (lambda (x) (- (+ r c) x)) (lambda (y) y)))))
          
          ((equal? piece `queen) (append
                                  (append (generate-list (lambda (x) x) (lambda (y) c))
                                          (generate-list (lambda (x) r) (lambda (y) y)))
                                  (append
                                   (if (> r c) (generate-list (lambda (x) (- 9 x)) (lambda (y) (- (+ c 9) (+ r y)))) ; -ve slope line
                                       (generate-list (lambda (x) (- (+ r 9) (+ c x))) (lambda (y) (- 9 y))))
                                   
                                   (if (> (+ r c) 9) (generate-list (lambda (x) (- 9 x)) (lambda (y) (+ r c y -9)))
                                       (generate-list (lambda (x) (- (+ r c) x)) (lambda (y) y))))))
          ((equal? piece `king) (append (list (cons (+ r 1) (+ c 1)) (cons (+ r 1) c) (cons (+ r 1) (- c 1))
                                              (cons r (+ c 1)) (cons r (- c 1))
                                              (cons (- r 1) (+ c 1)) (cons (- r 1) c) (cons (- r 1) (- c 1)))
                                        (if (equal? color `W) (list (cons 8 7) (cons 8 3))
                                            (list (cons 1 7) (cons 1 3)))))
          (else "error catch 2")))
  
  (foldr (lambda (x y) (if (final-check? pos x board color 'not) (cons x y)
                           y))
         '()
         moves-list))
